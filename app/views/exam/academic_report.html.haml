- # Fedena
- #Copyright 2010 Foradian Technologies Private Limited
- #
- #This product includes software developed at
- #Project Fedena - http://www.projectfedena.org/
- #
- #Licensed under the Apache License, Version 2.0 (the "License");
- #you may not use this file except in compliance with the License.
- #You may obtain a copy of the License at
- #
- #  http://www.apache.org/licenses/LICENSE-2.0
- #
- #Unless required by applicable law or agreed to in writing,
- #software distributed under the License is distributed on an
- #"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- #KIND, either express or implied.  See the License for the
- #specific language governing permissions and limitations
- #under the License.
#content-header
  = image_tag("examination/show_exam.png")
  %h1= t('exams_text')
  %h3= t('academic_reports')
  #app-back-button
    = back_button
#page-yield
  - unless flash[:notice].nil?
    %p.flash-msg
      = flash[:notice]
  %h4
    = @student.full_name
    | #{@student.batch.name} | #{@student.batch.course.full_name}
  %table#listing{:wisth => "100%"}
    %tr.tr-head
      %td= t('subject')
      - @exam_groups.each do |exam_group|
        %td= exam_group.name
      %td= t('total')
    - @subjects.each do |subject|
      %tr{:class => "tr-#{cycle('odd','even')}"}
        %td.col-3= subject.code
        - @mmg = 1;@g = 1
        - @exam_groups.each do |exam_group|
          - @exam = Exam.find_by_subject_id_and_exam_group_id(subject.id,exam_group.id)
          - exam_score = ExamScore.where(student_id: @student.id, exam_id: @exam.id).first unless @exam.nil?
          - if exam_group.exam_type == "MarksAndGrades"
            %td.col-3
              - unless @exam.nil?
                - unless exam_score.nil?
                  = exam_score.marks
                  \/#{@exam.maximum_marks}[#{exam_score.grading_level.name}]
          - elsif exam_group.exam_type == "Marks"
            %td.col-3
              - unless @exam.nil?
                - unless exam_score.nil?
                  = exam_score.marks
                  \/#{@exam.maximum_marks}
          - else
            %td.col-3= exam_score.grading_level.name unless exam_score.nil?
            - @g = 0
        - total_score = ExamScore.new()
        - if @mmg == @g
          %td.col-1= total_score.grouped_exam_subject_total(subject,@student,@type,@batch)
        - else
          %td.col-1 -
    %tr.tr-head
      %td= t('total')
      - @max_total = 0
      - @marks_total = 0
      - @exam_groups.each do |exam_group|
        - if exam_group.exam_type == "MarksAndGrades"
          %td= exam_group.total_marks(@student)[0]
        - elsif exam_group.exam_type == "Marks"
          %td= exam_group.total_marks(@student)[0]
        - else
          %td -
        - unless exam_group.exam_type == "Grades"
          - @max_total = @max_total + exam_group.total_marks(@student)[1]
          - @marks_total = @marks_total + exam_group.total_marks(@student)[0]
      %td
  - if @mmg == @g
    %h4
      = t('total_marks')
      \= #{"%.2f" %@marks_total} | #{t('aggregate')} % = #{"%.2f" %((@marks_total*100)/(@max_total  == 0 ? 1 : @max_total))}
  .extender
