- # Fedena
- #Copyright 2010 Foradian Technologies Private Limited
- #
- #This product includes software developed at
- #Project Fedena - http://www.projectfedena.org/
- #
- #Licensed under the Apache License, Version 2.0 (the "License");
- #you may not use this file except in compliance with the License.
- #You may obtain a copy of the License at
- #
- #  http://www.apache.org/licenses/LICENSE-2.0
- #
- #Unless required by applicable law or agreed to in writing,
- #software distributed under the License is distributed on an
- #"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- #KIND, either express or implied.  See the License for the
- #specific language governing permissions and limitations
- #under the License.
#content-header
  = image_tag("examination/show_exam.png")
  %h1= t('exams_text')
  %h3= t('generated_report')
  #app-back-button
    = back_button
#inner-tab-menu
  %ul
    %li= link_to "#{t('pdf_report')}", {:controller => "exam", :action => "generated_report2_pdf", :subject_id=> @subject.id,:page_height=>760},:target => '_blank'
#page-yield
  - unless flash[:notice].nil?
    %p.flash-msg
      = flash[:notice]
  .box
    %h4
      = @batch.name
      \- #{@batch.course.full_name} | #{@subject.name}
    #score-table
      %table#listing{:cellpadding => "1", :cellspacing => "1", :width => "100%"}
        %tr.tr-head
          %td= t('name')
          - @exam_groups.each do |exam_group|
            %td= exam_group.name
        - @students.each do |student|
          - is_valid_subject=1
          - unless @subject.elective_group_id.nil?
            - is_student_elective = StudentsSubject.find_by_student_id_and_subject_id(student.id,@subject.id)
            - is_valid_subject = 0 if is_student_elective.nil?
          - unless is_valid_subject == 0
            %tr{:class => "tr-#{cycle('odd', 'even')}"}
              %td.col-2= student.full_name
              - @exam_groups.each do |exam_group|
                %td.col-3
                  - exam = Exam.find_by_subject_id_and_exam_group_id(@subject.id, exam_group.id)
                  - exam_score = ExamScore.find_by_student_id_and_exam_id(student.id,exam.id) unless exam.nil?
                  - unless exam.nil?
                    - if exam_group.exam_type == 'Marks'
                      = exam_score.nil? ? '-' : "#{exam_score.marks || "-"}/"+exam.maximum_marks.to_s
                    - elsif exam_group.exam_type == 'Grades'
                      = exam_score.nil? ? '-' : (exam_score.grading_level || '-')
                    - else
                      = exam_score.nil? ? '-' : "#{(exam_score.marks || "-")}" +"/"+exam.maximum_marks.to_s+"[#{(exam_score.grading_level || "-")}]"
                  - else
                    = "#{t('n_a')}"
        %tr.tr-head
          %td
            = t('class_average')
          - @exam_groups.each do |exam_group|
            - if exam_group.exam_type == 'Marks' or exam_group.exam_type == 'MarksAndGrades'
              - exam = Exam.find_by_subject_id_and_exam_id(@subject.id, exam_group.id)
              %td
                = "%.2f"%exam_group.subject_wise_batch_average_marks(@subject.id) unless exam.nil?
            - else
              %td -
    .extender
