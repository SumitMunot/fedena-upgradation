- # Fedena
- #Copyright 2010 Foradian Technologies Private Limited
- #
- #This product includes software developed at
- #Project Fedena - http://www.projectfedena.org/
- #
- #Licensed under the Apache License, Version 2.0 (the "License");
- #you may not use this file except in compliance with the License.
- #You may obtain a copy of the License at
- #
- #  http://www.apache.org/licenses/LICENSE-2.0
- #
- #Unless required by applicable law or agreed to in writing,
- #software distributed under the License is distributed on an
- #"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- #KIND, either express or implied.  See the License for the
- #specific language governing permissions and limitations
- #under the License.
#page-yield.available_sections1
  .page1
  .section1.row
    %center
      .hor_line
      .extender
      #main_info
        %h3= @subject.name
        %h4
          = @batch.name
          \- #{@batch.course.full_name}
      - c = 'even'
      %table#pdf-table{:cellspacing => "0", :width => "100%"}
        %tr.table-header
          %td.name= t('name')
          - @exam_groups.each do |exam_group|
            %td.marks= exam_group.name
  - i = 0
  - @students.each do |student|
    - is_valid_subject=1
    - unless @subject.elective_group_id.nil?
      - is_student_elective = StudentsSubject.find_by_student_id_and_subject_id(student.id,@subject.id)
      - is_valid_subject = 0 if is_student_elective.nil?
    - unless is_valid_subject == 0
      .section1.row
        %center
          %table#pdf-table{:cellspacing => "0", :width => "100%"}
            %tr{:class => "#{cycle(c,(["odd","even"]-[c]).first)}"}
              %td.name= student.full_name
              - @exam_groups.each do |exam_group|
                %td.marks
                  - exam = Exam.find_by_subject_id(@subject.id,:conditions=>{:exam_group_id=>exam_group.id})
                  - exam_score = ExamScore.find_by_student_id(student.id,:conditions=>{:exam_id=>exam.id}) unless exam.nil?
                  - unless exam.nil?
                    - if exam_group.exam_type == 'Marks'
                      = exam_score.nil? ? '-' : "#{exam_score.marks || "-"}/"+exam.maximum_marks.to_s
                    - elsif exam_group.exam_type == 'Grades'
                      = exam_score.nil? ? '-' : (exam_score.grading_level || '-')
                    - else
                      = exam_score.nil? ? '-' :  "#{(exam_score.marks || "-")}" +"/"+exam.maximum_marks.to_s+"[#{(exam_score.grading_level || "-")}]"
                  - else
                    = "#{t('n_a')}"
      - i+=1
  .section1.row
    %center
      %table#pdf-table.grand_total{:cellspacing => "0", :width => "100%"}
        %tr{:class => "#{cycle(c,(["odd","even"]-[c]).first)}"}
          %td.col-pdf-bold.name
            = t('class_average')
          - @exam_groups.each do |exam_group|
            - if exam_group.exam_type == 'Marks' or exam_group.exam_type == 'MarksAndGrades'
              - exam = Exam.find_by_subject_id(@subject.id,:conditions=>{:exam_group_id=>exam_group.id})
              %td.col-pdf-bold.marks
                = "%.2f"%exam_group.subject_wise_batch_average_marks(@subject.id) unless exam.nil?
            - else
              %td.col-pdf-bold.marks -
- if params[:page_height]
  :javascript
    var body = document.body,
    html = document.documentElement;
    var pg_height = parseInt(#{params[:page_height]}
