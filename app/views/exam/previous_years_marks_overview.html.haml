- # Fedena
- #Copyright 2010 Foradian Technologies Private Limited
- #
- #This product includes software developed at
- #Project Fedena - http://www.projectfedena.org/
- #
- #Licensed under the Apache License, Version 2.0 (the "License");
- #you may not use this file except in compliance with the License.
- #You may obtain a copy of the License at
- #
- #  http://www.apache.org/licenses/LICENSE-2.0
- #
- #Unless required by applicable law or agreed to in writing,
- #software distributed under the License is distributed on an
- #"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- #KIND, either express or implied.  See the License for the
- #specific language governing permissions and limitations
- #under the License.
#content-header
  = image_tag("student_details/student_details_logo.jpg")
  %h1= t('students')
  %h3= t('previous_marks_overview')
  #app-back-button
    = back_button
#inner-tab-menu
  %ul
    %li
      = link_to "► #{t('pdf_report')}" ,{:controller => "exam",:action=> 'previous_years_marks_overview_pdf',:student => @student.id},:target=> '_blank'
#page-yield
  .box
    #register
      - @type = params[:type]
      - this_user = @current_user
      - unless this_user.student? or this_user.parent?
        .header
          .prev
            = link_to '◄',:action=>'previous_years_marks_overview',:student=>@student.previous_student,:type=>@type
          .month
            = @student.full_name
          .next
            = link_to '►',:action=>'previous_years_marks_overview',:student=>@student.next_student,:type=>@type
          .extender
    - @all_batches.each do |b|
      - if @type == 'grouped'
        - @grouped_exams = GroupedExam.find_all_by_batch_id(b.id)
        - @exam_groups = []
        - @grouped_exams.each do |x|
          - @exam_groups.push ExamGroup.find(x.exam_group_id)
      - else
        - @exam_groups = ExamGroup.find_all_by_batch_id(b.id)
      - general_subjects = Subject.find_all_by_batch_id(b.id, :conditions=>"elective_group_id IS NULL AND is_deleted=false")
      - student_electives = StudentsSubject.find_all_by_student_id(@student.id,:conditions=>"batch_id = #{b.id}")
      - elective_subjects = []
      - student_electives.each do |elect|
        - elective_subjects.push Subject.find(elect.subject_id)
      - @subjects = general_subjects + elective_subjects
      #register
        .header2
          .month
            - exam = ExamScore.new()
            - @aggr =  exam.batch_wise_aggregate(@student,b)
            = b.name
            |#{t('aggregate')} : #{"%.2f" %@aggr.to_f unless @aggr== 'nil' or @aggr.nil?}
          .extender
      #score-table
        %table#listing{:width => "100%"}
          %tr.tr-head
            %td= t('subject')
            - @exam_groups.each do |exam_group|
              %td= exam_group.name
            %td= t('total')
          - @subjects.each do |subject|
            %tr{:class => "tr-#{cycle('odd', 'even')}"}
              %td.col-2= subject.name
              - @mmg = 1;@g = 1
              - @exam_groups.each do |exam_group|
                - @exam = Exam.find_by_subject_id_and_exam_group_id(subject.id,exam_group.id)
                - exam_score = ExamScore.find_by_student_id(@student.id, :conditions=>{:exam_id=>@exam.id})unless @exam.nil?
                - unless exam_score.nil?
                  - if exam_group.exam_type == "MarksAndGrades"
                    %td.col-3
                      - unless @exam.nil?
                        = exam_score.marks || "-"
                        \/#{@exam.maximum_marks}|#{exam_score.grading_level || "-"}
                - elsif exam_group.exam_type == "Marks"
                  %td.col-3
                    = exam_score.marks || "-" unless @exam.nil?
                    \/#{@exam.maximum_marks unless @exam.nil?}
                - else
                  %td.col-3= exam_score.grading_level || "-" unless exam_score.nil?
                  - @g = 0
              - else
                %td
              - total_score = ExamScore.new()
              - if @mmg == @g
                %td.col-1= total_score.grouped_exam_subject_total(subject,@student,@type,b)
              - else
                %td.col-1 -
          %tr.tr-head
            %td= t('total')
            - @max_total = 0
            - @marks_total = 0
            - @exam_groups.each do |exam_group|
              - if exam_group.exam_type == "MarksAndGrades"
                %td= exam_group.total_marks(@student)[0]
              - elsif exam_group.exam_type == "Marks"
                %td= exam_group.total_marks(@student)[0]
              - else
                %td -
              - unless exam_group.exam_type == "Grades"
                - @max_total = @max_total + exam_group.total_marks(@student)[1]
                - @marks_total = @marks_total + exam_group.total_marks(@student)[0]
            %td
          %tr
      %br/
      - @additional_exam_groups = AdditionalExamGroup.find_all_by_batch_id(b)
      - @additional_exam_groups.each do |additional_exam_group|
        - if additional_exam_group.students.include?(@student)
          #additional_register
            .header2
              .month
                = b.name+" | "+ additional_exam_group.name
              .extender
          - @additional_exams = AdditionalExam.find_all_by_additional_exam_group_id(additional_exam_group)
          %table#additional_listing{:width => "100%"}
            %tr.tr-head
              %td= t('subject')
              - unless additional_exam_group.exam_type == "Grades"
                %td= t('marks')
              - unless additional_exam_group.exam_type == "Marks"
                %td= t('grades')
            - @additional_exams.each do |exam|
              - unless (exam.score_for(@student).marks.nil? &&  exam.score_for(@student).grading_level_id.nil?)
                %tr{:class => "tr-#{cycle('odd', 'even')}"}
                  %td.col-3= exam.subject.name
                  - unless additional_exam_group.exam_type == "Grades"
                    %td.col-3
                      = exam.score_for(@student).marks || "-"
                  - unless additional_exam_group.exam_type == "Marks"
                    %td.col-3
                      = exam.score_for(@student).grading_level || "-"
    %br/
    %br/
    - unless @aggr == 'nil'
      %script{:src => "/javascripts/swfobject.js", :type => "text/javascript"}
      = @graph
    .extender
