- # Fedena
- #Copyright 2010 Foradian Technologies Private Limited
- #
- #This product includes software developed at
- #Project Fedena - http://www.projectfedena.org/
- #
- #Licensed under the Apache License, Version 2.0 (the "License");
- #you may not use this file except in compliance with the License.
- #You may obtain a copy of the License at
- #
- #  http://www.apache.org/licenses/LICENSE-2.0
- #
- #Unless required by applicable law or agreed to in writing,
- #software distributed under the License is distributed on an
- #"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- #KIND, either express or implied.  See the License for the
- #specific language governing permissions and limitations
- #under the License.
#page-yield.available_sections1
  .page1
  .section1.row
    %center
      .hor_line
      .extender
  - if @mode=="batch"
    .section1.row
      %center
        #main_info
          %h3{:align => "center"}
            = @ranking_level.name
            = t('students')
          %h4{:align => "center"}
            = @batch.full_name
            = " | #{t('subject')} : "+@subject.name if @subject.present?
    - unless @scores.empty?
      - if @report_type=="subject"
        - ranked_students = Student.find_all_by_id(@scores.collect(&:student_id))
        - ranked_students = ranked_students.reject{|st| st.has_higher_priority_ranking_level(@ranking_level.id,"subject",@subject.id)==true}
      - else
        - unless @ranking_level.subject_count.nil?
          - sub_count = @ranking_level.subject_count
          - ranked_students = []
          - @students.each do|student|
            - @student_scores = @scores.dup
            - @student_scores.reject!{|s| !(s.student_id==student.id)}
            - if @ranking_level.subject_limit_type=="upper"
              - if @student_scores.count < sub_count
                - ranked_students << student
            - elsif @ranking_level.subject_limit_type=="exact"
              - if @student_scores.count == sub_count
                - ranked_students << student
            - else
              - if @student_scores.count >= sub_count
                - ranked_students << student
        - else
          - ranked_students = Student.find_all_by_id(@scores.collect(&:student_id))
        - ranked_students = ranked_students.reject{|st| st.has_higher_priority_ranking_level(@ranking_level.id,"overall","")==true}
      - unless ranked_students.empty?
        - c = 'even'
        #table-headers.section1.row
          %center
            %table#pdf-table{:width => "100%"}
              %tr.table-header
                %td.serial-td1= t('sl_no')
                %td.adm-td1= t('adm_no')
                %td.name-td= t('name')
        - ranked_students.each_with_index do |s,ind|
          .section1.row
            %center
              %table#pdf-table{:width => "100%"}
                %tr{:class => "#{cycle(c,(["odd","even"]-[c]).first)}"}
                  %td.serial-td1= ind+1
                  %td.adm-td1= s.admission_no.present? ? s.admission_no : "-"
                  %td.name-td= s.full_name
      - else
        .section1.row
          %center
            %p.flash-msg= "#{t('no_text')} #{@ranking_level.name} #{t('students_found')}"
    - else
      .section1.row
        %center
          %p.flash-msg= "#{t('no_text')} #{@ranking_level.name} #{t('students_found')}"
  - else
    .section1.row
      %center
        #main_info
          %h3{:align => "center"}
            = @ranking_level.name
            = t('students')
          %h4{:align => "center"}= @course.full_name
    - unless @scores.empty?
      - unless @ranking_level.subject_count.nil?
        - sub_count = @ranking_level.subject_count
        - ranked_students = []
        - unless @ranking_level.full_course==true
          - @students.each do|student|
            - @student_scores = @scores.dup
            - @student_scores.reject!{|s| !(s.student_id==student.id)}
            - batch_ids = @student_scores.collect(&:batch_id)
            - batch_ids.each do|batch_id|
              - unless batch_ids.empty?
                - count = batch_ids.count(batch_id)
                - if @ranking_level.subject_limit_type=="upper"
                  - if count < sub_count
                    - unless student.has_higher_priority_ranking_level(@ranking_level.id,"course","")
                      - ranked_students << [student.id,batch_id]
                - elsif @ranking_level.subject_limit_type=="exact"
                  - if count == sub_count
                    - unless student.has_higher_priority_ranking_level(@ranking_level.id,"course","")
                      - ranked_students << [student.id,batch_id]
                - else
                  - if count >= sub_count
                    - unless student.has_higher_priority_ranking_level(@ranking_level.id,"course","")
                      - ranked_students << [student.id,batch_id]
                - batch_ids.delete(batch_id)
        - else
          - @students.each do|student|
            - @student_scores = @scores.dup
            - @student_scores.reject!{|s| !(s.student_id==student.id)}
            - if @ranking_level.subject_limit_type=="upper"
              - if @student_scores.count < sub_count
                - unless student.has_higher_priority_ranking_level(@ranking_level.id,"course","")
                  - ranked_students << [student.id,student.batch.id]
            - elsif @ranking_level.subject_limit_type=="exact"
              - if @student_scores.count == sub_count
                - unless student.has_higher_priority_ranking_level(@ranking_level.id,"course","")
                  - ranked_students << [student.id,student.batch.id]
            - else
              - if @student_scores.count >= sub_count
                - unless student.has_higher_priority_ranking_level(@ranking_level.id,"course","")
                  - ranked_students << [student.id,student.batch.id]
      - else
        - ranked_students = []
        - @scores.each do|score|
          - unless score.student.has_higher_priority_ranking_level(@ranking_level.id,"course","")
            - ranked_students << [score.student_id,score.batch_id]
      - unless ranked_students.empty?
        - c = 'even'
        #table-headers.section1.row
          %center
            %table#pdf-table{:width => "100%"}
              %tr.table-header
                %td.serial-td= t('sl_no')
                %td.adm-td= t('adm_no')
                %td.name-td= t('name')
                %td.batch-td= t('batch')
                - unless @ranking_level.full_course==true
                  %td.batch-td= "#{@ranking_level.name} #{t('batch')}"
        - ranked_students.each_with_index do |s,i|
          - stu = Student.find(s[0])
          - batch = Batch.find(s[1])
          .section1.row
            %center
              %table#pdf-table{:width => "100%"}
                %tr{:class => "#{cycle(c,(["odd","even"]-[c]).first)}"}
                  %td.serial-td= i+1
                  %td.adm-td= stu.admission_no.present? ? stu.admission_no : "-"
                  %td.name-td= stu.full_name
                  %td.batch-td= stu.batch.full_name
                  - unless @ranking_level.full_course==true
                    %td.batch-td= batch.full_name
      - else
        .section1.row
          %center
            %p.flash-msg= "#{t('no_text')} #{@ranking_level.name} #{t('students_found')}"
    - else
      .section1.row
        %center
          %p.flash-msg= "#{t('no_text')} #{@ranking_level.name} #{t('students_found')}"
- if params[:page_height]
  :javascript
    var body = document.body,
    html = document.documentElement;
    var pg_height = parseInt(#{params[:page_height]}
