- # Fedena
- #Copyright 2010 Foradian Technologies Private Limited
- #
- #This product includes software developed at
- #Project Fedena - http://www.projectfedena.org/
- #
- #Licensed under the Apache License, Version 2.0 (the "License");
- #you may not use this file except in compliance with the License.
- #You may obtain a copy of the License at
- #
- #  http://www.apache.org/licenses/LICENSE-2.0
- #
- #Unless required by applicable law or agreed to in writing,
- #software distributed under the License is distributed on an
- #"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- #KIND, either express or implied.  See the License for the
- #specific language governing permissions and limitations
- #under the License.
- grade_type = "normal"
- grade_type = "GPA" if @batch.gpa_enabled?
- grade_type = "CWA" if @batch.cwa_enabled?
- if @type=="grouped"
  #score-table
    .custom_header
      %span.student= "#{@student.full_name} - #{@student.admission_no}"
    %table#listing{:width => "100%"}
      %tr.tr-head
        %td= t('subject')
        - if grade_type=="GPA" or grade_type=="CWA"
          %td= t('credit')
        - @exam_groups.each do |exam_group|
          %td= exam_group.name
        %td= t('combined')
      - @subjects.each do |subject|
        %tr{:class => "tr-#{cycle('odd', 'even')}"}
          %td.col-2= subject.name
          - if grade_type=="GPA" or grade_type=="CWA"
            %td.col-3= subject.credit_hours.present? ? subject.credit_hours : "-"
          - @exam_groups.each do |exam_group|
            - @exam = Exam.find_by_subject_id_and_exam_group_id(subject.id,exam_group.id)
            - exam_score = ExamScore.find_by_student_id(@student.id, :conditions=>{:exam_id=>@exam.id})unless @exam.nil?
            %td.col-3
              - if grade_type=="GPA"
                = exam_score.present? ? "#{exam_score.grading_level || "-"}"+" ["+"#{exam_score.grading_level.present? ? (exam_score.grading_level.credit_points || "-") : "-"}"+"]" : "-"
              - elsif grade_type=="CWA"
                = exam_score.present? ? "#{exam_score.marks.present? ? ("%.2f" %((exam_score.marks.to_f/@exam.maximum_marks.to_f)*100)) : "-"}"+" ["+"#{exam_score.grading_level.present? ? exam_score.grading_level : "-"}"+"]" : "-"
              - else
                - if exam_group.exam_type == "MarksAndGrades"
                  = exam_score.nil? ? '-' :  "#{(exam_score.marks || "-")}" +"/"+@exam.maximum_marks.to_s+"[#{(exam_score.grading_level || "-")}]"
                - elsif exam_group.exam_type == "Marks"
                  = exam_score.nil? ? '-' : "#{exam_score.marks || "-"}/"+@exam.maximum_marks.to_s
                - else
                  = exam_score.nil? ? '-' : (exam_score.grading_level || '-')
          - subject_average = GroupedExamReport.find_by_student_id_and_subject_id_and_score_type(@student.id,subject.id,"s")
          %td.col-3= subject_average.present? ? subject_average.marks : "-"
      %tr.tr-blank
      %tr.tr-head
        - if grade_type=="GPA"
          %td{:align => "right", :colspan => "2"}= t('gpa')
        - elsif grade_type=="CWA"
          %td{:align => "right", :colspan => "2"}= t('weighted_average')
        - else
          %td{:align => "right"}= t('percentage')
        - @exam_groups.each do |exam_group|
          - exam_total = GroupedExamReport.find_by_student_id_and_exam_group_id_and_score_type(@student.id,exam_group.id,"e")
          %td.col-3
            = exam_total.present? ? exam_total.marks : "-"
        - total_avg = GroupedExamReport.find_by_student_id_and_batch_id_and_score_type(@student.id,@batch.id,"c")
        %td.col-3= total_avg.present? ? total_avg.marks : "-"
- else
  - all_exams = @exam_groups.reject{|ex| ex.exam_type == "Grades"}
  #score-table
    %table#listing{:width => "100%"}
      .custom_header
        %span.student= "#{@student.full_name} - #{@student.admission_no}"
      %tr.tr-head
        %td= t('subject')
        - @exam_groups.each do |exam_group|
          %td= exam_group.name
        - unless all_exams.empty?
          %td= t('total')
      - @subjects.each do |subject|
        %tr{:class => "tr-#{cycle('odd', 'even')}"}
          %td.col-2= subject.name
          - @mmg = 1;@g = 1
          - @exam_groups.each do |exam_group|
            - @exam = Exam.find_by_subject_id_and_exam_group_id(subject.id,exam_group.id)
            - exam_score = ExamScore.find_by_student_id(@student.id, :conditions=>{:exam_id=>@exam.id})unless @exam.nil?
            %td.col-3
              - unless @exam.nil?
                - if exam_group.exam_type == "MarksAndGrades"
                  = exam_score.nil? ? '-' :  "#{(exam_score.marks || "-")}" +"/"+@exam.maximum_marks.to_s+"[#{(exam_score.grading_level || "-")}]"
                - elsif exam_group.exam_type == "Marks"
                  = exam_score.nil? ? '-' : "#{exam_score.marks || "-"}/"+@exam.maximum_marks.to_s
                - else
                  = exam_score.nil? ? '-' : (exam_score.grading_level || '-')
                  - @g = 0
              - else
                = "#{t('n_a')}"
            - total_score = ExamScore.new()
            - unless all_exams.empty?
              - if @mmg == @g
                %td.col-1= total_score.grouped_exam_subject_total(subject,@student,@type)
              - else
                %td.col-1 -
      %tr.tr-head
        %td= t('total')
        - @max_total = 0
        - @marks_total = 0
        - @exam_groups.each do |exam_group|
          - if exam_group.exam_type == "MarksAndGrades"
            %td= exam_group.total_marks(@student)[0]
          - elsif exam_group.exam_type == "Marks"
            %td= exam_group.total_marks(@student)[0]
          - else
            %td -
          - unless exam_group.exam_type == "Grades"
            - @max_total = @max_total + exam_group.total_marks(@student)[1]
            - @marks_total = @marks_total + exam_group.total_marks(@student)[0]
        - unless all_exams.empty?
          %td
      %tr
    - if @mmg == @g
      .custom_header
        - percentage = (@marks_total*100/@max_total.to_f)  unless @max_total==0
        = t('total_marks')
        \= #{@marks_total} | #{t('aggregate')} % = #{"%.2f" %percentage  unless percentage.nil?}
- if @previous_batch == 1
  = link_to " ► #{t('pdf_report')}",                                                                                                                |
    { :action => "generated_report4_pdf", :batch_id => @batch.id, :student=>@student.id, :type=> @type},:target => '_blank', :class=> 'user_button' |
- else
  = link_to " ► #{t('pdf_report')}",                                                                                                                |
    { :action => "generated_report4_pdf", :batch_id => @batch.id, :student=>@student.id, :type=> @type},:target => '_blank', :class=> 'user_button' |
.extender
