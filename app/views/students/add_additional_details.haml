- # Fedena
- #Copyright 2010 Foradian Technologies Private Limited
- #
- #This product includes software developed at
- #Project Fedena - http://www.projectfedena.org/
- #
- #Licensed under the Apache License, Version 2.0 (the "License");
- #you may not use this file except in compliance with the License.
- #You may obtain a copy of the License at
- #
- #  http://www.apache.org/licenses/LICENSE-2.0
- #
- #Unless required by applicable law or agreed to in writing,
- #software distributed under the License is distributed on an
- #"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- #KIND, either express or implied.  See the License for the
- #specific language governing permissions and limitations
- #under the License.
= javascript_include_tag :application
#content-header
  = image_tag("show_settings.png")
  %h1= t('student_settings')
  %h3= t('add_additional_details')
  #app-back-button
    = back_button
#page-yield
  - unless flash[:notice].nil?
    %p.flash-msg
      = flash[:notice]
  = form_for @additional_field, :url=>{:action=>(@additional_field.new_record? ? "add_additional_details" : "edit_additional_details"), :id => @additional_field.id} do |c|
    = error_messages_for 'additional_field'
    #form-content
      .label-field-pair
        %label{:for => "category_name"}= t('name')
        .text-input-bg
          = c.text_field :name
      .label-checkbox-pair
        %label.status{:for => "status"}= t('status')
        #radio-buttons
          = c.radio_button  "status", "true", :checked => "checked"
          %label.label_for_status{:for => "add_grade_status_true"}= t('active')
          = c.radio_button  "status", "false"
          %label.label_for_status{:for => "add_grade_status_false"}= t('inactive')
      .label-field-pair
        .label-container= c.label :is_mandatory, t('is_mandatory')
        .input-container
          = c.check_box :is_mandatory
      .label-field-pair
        .label-container
          = c.label :input_type,"#{t('input_method')}"
        .text-input-bg
          = c.select :input_type, [["TextBox","text"],["Select Box","belongs_to"],["CheckBox","has_many"]] ,{},:class=>"input-type-select"
      .custom{:style => "display: none"}
        - c.fields_for :student_additional_field_options do |builder|
          = render "student_additional_field_option_fields" ,:c=>builder
        %div
          = link_to_add_fields t('add'), c, :student_additional_field_options
      #submit-button
        - unless @additional_field.new_record?
          = submit_tag("► #{t('update')}")
          = link_to " ► #{t('cancel')}",                                   |
            { :action => "add_additional_details"}, :class=> 'user_button' |
        - else
          = submit_tag("► #{t('create_text')}")
  #category-list
    = render :partial => "additional_fields"
:javascript
  function add_fields(link, association, content){
    var new_id = new Date().getTime();
    var regexp = new RegExp("new_" + association, "g");
    $(link).up().insert({
      before: content.replace(regexp, new_id)
    });
    if ($('.input-type-select')!=""){
      $('.input-type-select').invoke('observe','change',toggle_custom);
    }
  }


  function remove_fields(link){
    //    console.log($(link).previous("input[type=hidden]"));
    $(link).previous("input[type=hidden]").value='1';
    $(link).up(".fields").hide();
  }

  function toggle_custom(val){
    console.log(this)
    console.log(val)
    dest = this.up(2).select('.custom')[0]
    //if(dest != null)
    if(this.value == 'text'){
      dest.hide();
    }
    else{
      dest.show();
    }
    return true;
  }
  document.observe("dom:loaded", function() {
    if ($('.input-type-select')!=""){
      $('.input-type-select').invoke('observe','change',toggle_custom);
      $('.input-type-select').first().fire('change');
      $('select').each(function(e){
        toggle_custom.call(e);
      });
    }
  });
