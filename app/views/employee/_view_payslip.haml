- # Fedena
- #Copyright 2010 Foradian Technologies Private Limited
- #
- #This product includes software developed at
- #Project Fedena - http://www.projectfedena.org/
- #
- #Licensed under the Apache License, Version 2.0 (the "License");
- #you may not use this file except in compliance with the License.
- #You may obtain a copy of the License at
- #
- #  http://www.apache.org/licenses/LICENSE-2.0
- #
- #Unless required by applicable law or agreed to in writing,
- #software distributed under the License is distributed on an
- #"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- #KIND, either express or implied.  See the License for the
- #specific language governing permissions and limitations
- #under the License.
%ul.item-list
  %li.heading
    = t('payslip_generated_on')
    = @salary_date
%ul.item-list
  %li.heading1= t('earnings')
  - @monthly_payslips.each do |mp|
    - category = PayrollCategory.find(mp.payroll_category_id)
    - @emp = Employee.find(mp.employee_id)
    - unless category.is_deduction == true
      %li{:class => "list#{cycle('odd', 'even')}"}
        .item-name
          = category.name
        .item-edit
          %span.currency-type= @currency_type
          = mp.amount
  - unless @individual_payslip_category.empty?
    - @individual_payslip_category.each do |pc|
      - if  pc.is_deduction == false
        %li{:class => "list#{cycle('odd', 'even')}"}
          .item-name= pc.name
          .item-edit
            %span.currency-type= @currency_type
            = pc.amount
  %li{:class => "list#{cycle('odd', 'even')}"}
    .item-name
      %b= t('total_salary')
    .item-edit
      %b
        %span.currency-type= @currency_type
        = @net_non_deductionable_amount
%ul.item-list
  %li.heading1= t('deductions')
  - @monthly_payslips.each do |mp|
    - category = PayrollCategory.find(mp.payroll_category_id)
    - @emp = Employee.find(mp.employee_id)
    - if category.is_deduction == true
      %li{:class => "list#{cycle('odd', 'even')}"}
        .item-name= category.name
        .item-edit
          %span.currency-type= @currency_type
          = mp.amount
  - unless @individual_payslip_category.empty?
    - @individual_payslip_category.each do |pc|
      - if  pc.is_deduction == true
        %li{:class => "list#{cycle('odd', 'even')}"}
          .item-name= pc.name
          .item-edit
            %span.currency-type= @currency_type
            = pc.amount
  %li{:class => "list#{cycle('odd', 'even')}"}
    .item-name
      %b= t('deductions')
    .item-edit
      %span.currency-type
        %b= @currency_type
      %b= @net_deductionable_amount
%ul.item-list
  %li.heading1= t('total')
  %li.listeven
    .item-name
      %b= t('net_salary')
    .item-edit
      %b
        %span.currency-type= @currency_type
        = @net_amount
  %li.listodd
    .item-name
      %b= t('remark')
    .item-edit
      %b
        %span.currency-type1= @monthly_payslips.first.remark
- if permitted_to? :delete_payslip, :payroll
  .edit-delete-link
    = link_to "#{t('delete_text')}",{:controller => "employee", :action => "delete_payslip", :id=> @emp.id, :id2=>@salary_date}, :confirm=>"#{t('delete_confirm_msg')}", :class=>"user_button", method: :DELETE
- if @current_user==@emp.user
  .pdf-link
    = link_to "► #{t('pdf_report')}", {:controller=>"employee", :action=>"individual_payslip_pdf", :id=>@emp.id, :id2=>@salary_date}, :target=> "_blank", :class=>"user_button"
- elsif permitted_to?     :employee_individual_payslip_pdf,:employee
  .pdf-link
    = link_to "► #{t('pdf_report')}", {:controller=>"employee", :action=>"employee_individual_payslip_pdf", :id=>@emp.id, :id2=>@salary_date}, :target=> "_blank", :class=>"user_button"
