- # Fedena
- #Copyright 2010 Foradian Technologies Private Limited
- #
- #This product includes software developed at
- #Project Fedena - http://www.projectfedena.org/
- #
- #Licensed under the Apache License, Version 2.0 (the "License");
- #you may not use this file except in compliance with the License.
- #You may obtain a copy of the License at
- #
- #  http://www.apache.org/licenses/LICENSE-2.0
- #
- #Unless required by applicable law or agreed to in writing,
- #software distributed under the License is distributed on an
- #"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- #KIND, either express or implied.  See the License for the
- #specific language governing permissions and limitations
- #under the License.
#page-yield
  .hor_line
  .extender
  .report
    #main_info
      %h4
        = @student.full_name
    #pdf-info
      %table#pdf-table{:cellspacing => "0", :width => "100%"}
        %tr.table-header
          %td= t('subject')
          - @exam_groups.each do |exam_group|
            %td= exam_group.name
          %td= t('total')
        - c ='even'
        - @subjects.each do |subject|
          %tr{:class => "#{cycle(c,(["odd","even"]-[c]).first)}"}
            %td.col-pdf= subject.name
            - @mmg = 1;@g = 1
            - @exam_groups.each do |exam_group|
              - @exam = Exam.find_by_subject_id_and_exam_group_id(subject.id,exam_group.id)
              - exam_score = ArchivedExamScore.find_by_student_id(@student.id, :conditions=>{:exam_id=>@exam.id})unless @exam.nil?
              - unless exam_score.nil?
                - if exam_group.exam_type == "MarksAndGrades"
                  %td.col-3
                    - unless @exam.nil?
                      = exam_score.marks
                      | #{@exam.maximum_marks} | #{exam_score.grading_level.nil? ? '-' : exam_score.grading_level.name}
              - elsif exam_group.exam_type == "Marks"
                %td.col-3
                  = exam_score.marks unless @exam.nil?
                  | #{@exam.maximum_marks unless @exam.nil?}
              - else
                %td.col-3= exam_score.grading_level.nil? ? '-' : exam_score.grading_level.name  unless exam_score.nil?
                - @g = 0
            - else
              %td
            - total_score = ArchivedExamScore.new()
            - if @mmg == @g
              %td.col-1= total_score.grouped_exam_subject_total(subject,@student,@type)
            - else
              %td.col-1 -
        %tr{:class => "#{cycle(c,(["odd","even"]-[c]).first)}"}
          %td= t('total')
          - @max_total = 0
          - @marks_total = 0
          - @exam_groups.each do |exam_group|
            - if exam_group.exam_type == "MarksAndGrades"
              %td= exam_group.archived_total_marks(@student)[0]
            - elsif exam_group.exam_type == "Marks"
              %td= exam_group.archived_total_marks(@student)[0]
            - else
              %td -
            - unless exam_group.exam_type == "Grades"
              - @max_total = @max_total + exam_group.archived_total_marks(@student)[1]
              - @marks_total = @marks_total + exam_group.archived_total_marks(@student)[0]
          %td
        %tr
    - if @mmg == @g
      - percentage = (@marks_total*100/@max_total.to_f)  unless @max_total==0
      %h4
        = t('total_marks')
        \= #{@marks_total} | #{t('aggregate')} % = #{percentage.nil? ? '-' : sprintf("%.2f",percentage)}
