- # Fedena
- #Copyright 2010 Foradian Technologies Private Limited
- #
- #This product includes software developed at
- #Project Fedena - http://www.projectfedena.org/
- #
- #Licensed under the Apache License, Version 2.0 (the "License");
- #you may not use this file except in compliance with the License.
- #You may obtain a copy of the License at
- #
- #  http://www.apache.org/licenses/LICENSE-2.0
- #
- #Unless required by applicable law or agreed to in writing,
- #software distributed under the License is distributed on an
- #"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- #KIND, either express or implied.  See the License for the
- #specific language governing permissions and limitations
- #under the License.
= javascript_include_tag :application
#content-header
  = image_tag("show_settings.png")
  %h1= t('configuration_text')
  %h3= t('general_settings')
  #app-back-button
    = back_button
#page-yield
  - unless flash[:notice].nil?
    %p.flash-msg
      = flash[:notice]
  = error_messages_for :school_detail
  = form_for(:configuration,:html=> {:multipart=>true}) do |c|
    .box
      .label-field-pair
        %label{:for => "configuration_currency_type"}= t('school_college_name')
        .text-input-bg
          = text_field :configuration, :institution_name, :value => @config[:institution_name]
      .label-field-pair
        %label{:for => "configuration_currency_type"}= t('school_college_address')
        .text-input-bg
          = text_field :configuration, :institution_address, :value => @config[:institution_address]
      .label-field-pair
        %label{:for => "configuration_currency_type"}= t('school_college_phone')
        .text-input-bg
          = text_field :configuration, :institution_phone_no, :value => @config[:institution_phone_no]
      .label-field-pair
        %label{:for => "configuration_student_attendance_type"}= t('student_attendance_type')
        .text-input-bg
          = select :configuration, :student_attendance_type, [["#{t('configuration.daily_text')}", "Daily"], ["#{t('configuration.subject_wise_text')}", "SubjectWise"]], |
            :selected => @config[:student_attendance_type]                                                                                    |
      .label-field-pair
        %label{:for => "configuration_currency_type"}= t('finance_year_start_date')
        .text-input-bg
          = date_select 'configuration[financial_year_start_date]', I18n.l(@config[:financial_year_start_date].to_date,:format=>:default), |
            :year_range => 15.years.ago..5.years.from_now, :readonly=>true, :popup=>"force"                                                |
      .label-field-pair
        %label{:for => "configuration_currency_type"}= t('finance_year_end_date')
        .text-input-bg
          = date_select 'configuration[financial_year_end_date]',  I18n.l(@config[:financial_year_end_date].to_date,:format=>:default), |
            :year_range => 15.years.ago..5.years.from_now, :readonly=>true, :popup=>"force"                                             |
      .label-field-pair
        %label{:for => "configuration_student_attendance_type"}= "#{t('language') } "
        .text-input-bg
          = select :configuration, :locale, available_language_options, |
            :selected => @config[:locale]                               |
      .label-field-pair
        %label{:for => "configuration_student_attendance_type"} Time Zone
        .text-input-bg
          = select :configuration, :time_zone, @time_zones.map{|t| ["#{t.name}(#{t.code}) - GMT#{t.difference_type}#{Time.at(t.time_difference).gmtime.strftime('%R')}",t.id]},:selected =>@config[:time_zone].to_i
      .label-field-pair
        %label{:for => "configuration_default_country"}= t('country')
        .text-input-bg
          - selected_value = @config[:default_country].present? ? @config[:default_country].to_i : 76
          = select :configuration, :default_country, @countries.map {|c| [c.name, c.id]}, :selected=> selected_value.to_i
      .label-field-pair
        %label{:for => "configuration_currency_type"}= t('currency_type')
        .text-input-bg
          = text_field :configuration, :currency_type, :value => @config[:currency_type]
      .label-field-pair
        %label{:for => "configuration_currency_type"}
          = t('upload_logo')
          (#{t('max_size')}, #{t('height_width')})
        .text-input-bg
          = file_field 'school_detail','school_logo', :size=>12
      .label-field-pair
        %label{:for => "configuration_currency_type"}= t('network_state')
        .text-input-bg
          = select :configuration, :network_state, [["#{t('online')}","Online"],["#{t('offline')}","Offline"]],:selected =>@config[:network_state]
      .grades
        .label-field-pair
          %label{:for => "configuration_grading_systems"}= t('include_grading_systems')
        .fee_category_scroll
          .sel-list
            = t('select')
            \: #{link_to t('all'), 'javascript: void (0)', onclick: "$('input.batches_box').each(function(checkbox) { checkbox.checked = true; });"},
            \#{link_to t('none'), 'javascript: void(0)', onclick: "$('input.batches_box').each(function(checkbox) { checkbox.checked = false; });"}
          - @grading_types.each do |key,val|
            .each_batch
              = check_box :configuration, val.underscore , :checked => (@enabled_grading_types.include? key),:class=>'batches_box'
              %label{:for => "configuration_#{val.underscore}"}= val
      - FedenaPlugin::REGISTERED_HOOKS[:general_settings_form].each do |mod|
        = render :partial=>mod.camelize.constantize.send("general_settings_form")
      .extender
      %br/
      - if @config[:admission_number_auto_increment] == '1'
        = check_box :configuration, :admission_number_auto_increment, :checked => true
        = t('student_admission_auto')
      - else
        = check_box :configuration, :admission_number_auto_increment, :checked => false
        = t('student_admission_auto')
      %br/
      - if Settings.available_modules.include?('HR')
        - if @config[:employee_number_auto_increment] == '1'
          = check_box :configuration, :employee_number_auto_increment, :checked => true
          = t('employee_admission_auto')
        - else
          = check_box :configuration, :employee_number_auto_increment, :checked => false
          = t('employee_admission_auto')
      %br/
      - if @config[:first_time_login_enable] == '1'
        = check_box :configuration, :first_time_login_enable, :checked => true
        = t('enable_first_time_login')
      - else
        = check_box :configuration, :first_time_login_enable, :checked => false
        = t('enable_first_time_login')
      - FedenaPlugin::REGISTERED_HOOKS[:general_settings_checkbox].each do |mod|
        %br/
        = render :partial=>mod.camelize.constantize.send("general_settings_checkbox")
      #submit-button
        = submit_tag "â–º #{t('update')}"
